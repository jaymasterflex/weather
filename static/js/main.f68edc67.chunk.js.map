{"version":3,"sources":["Keys.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_KEY","BASE_URL","api","key","Keys","base","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","fetch","then","res","json","result","console","log","name","sys","country","d","date","String","window","Date","slice","dateBuild","Math","round","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6FAAAA,EAAOC,QAAU,CACbC,QAAS,mCACTC,SAAU,6C,gKCIRC,EAAM,CACVC,IAAKC,IAAKJ,QACVK,KAAMD,IAAKH,UAmEEK,MA/Df,WACE,IADa,EAOaC,mBAAS,IAPtB,mBAONC,EAPM,KAOCC,EAPD,OAQiBF,mBAAS,IAR1B,mBAQNG,EARM,KAQGC,EARH,KAqBb,OACE,yBAAKC,UACoB,oBAAhBF,EAAQG,KACbH,EAAQG,KAAKC,KAAO,GAClB,UACA,WACF,OAGF,8BACE,yBAAKF,UAAU,oBACb,2BAAOG,KAAK,OACJC,YAAY,YACZJ,UAAU,aACVK,SAAU,SAACC,GAAD,OAAOT,EAASS,EAAEC,OAAOC,QACnCA,MAAOZ,EACPa,WA5BD,SAACH,GACA,UAAVA,EAAEf,KACJmB,MAAM,GAAD,OAAIpB,EAAIG,KAAR,qBAAyBG,EAAzB,+BAAqDN,EAAIC,MAC7DoB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLjB,EAAS,IACTE,EAAWe,GACXC,QAAQC,IAAIF,UAwBY,oBAAhBhB,EAAQG,KACd,6BACE,yBAAKD,UAAU,sBACb,yBAAKA,UAAU,YACZF,EAAQmB,KADX,KACmBnB,EAAQoB,IAAIC,SAE/B,yBAAKnB,UAAU,QAAf,IA7CM,SAACoB,GACjB,IAAIC,EAAMC,OAAO,IAAIC,OAAOC,MAE5B,OADAH,EAAOA,EAAKI,MAAM,EAAG,IA2CaC,CAAU,IAAIF,QAExC,yBAAKxB,UAAU,qBACb,yBAAKA,UAAU,eACZ2B,KAAKC,MAAM9B,EAAQG,KAAKC,MAD3B,SAGA,yBAAKF,UAAU,WAAf,IAA2BF,EAAQA,QAAQ,GAAGG,QAIlD,MCxDU4B,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDyH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.f68edc67.chunk.js","sourcesContent":["module.exports = {\r\n    API_KEY: \"c6df597d28ca93ed88b3efbbbfbfaaa3\",\r\n    BASE_URL: \"https://api.openweathermap.org/data/2.5/\",\r\n};","import React, { useState } from \"react\"\nimport Keys from \"./Keys\"\nimport ReactDOM from \"react-dom\"\n\n\n\nconst api = {\n  key: Keys.API_KEY,\n  base: Keys.BASE_URL,\n};\n\n\nfunction App() {\n  const dateBuild = (d) => {\n    let date= String(new window.Date());\n    date = date.slice(3, 15);\n    return date;\n  };\n\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then((res) => res.json())\n      .then((result) => {\n        setQuery(\"\");\n        setWeather(result);\n        console.log(result);\n      });\n    }\n  };\n\n  return (\n    <div className={\n      typeof weather.main != \"undefined\"\n      ? weather.main.temp > 18\n        ? \"App hot\"\n        : \"App cold\"\n      : \"App\"\n    }\n    >\n      <main>\n        <div className=\"search-container\">\n          <input type=\"text\"\n                  placeholder=\"Search...\"\n                  className=\"search-bar\"\n                  onChange={(e) => setQuery(e.target.value)}\n                  value={query}\n                  onKeyPress={search}\n                  />\n        </div>\n        {typeof weather.main != \"undefined\" ? (\n          <div>\n            <div className=\"location-container\">\n              <div className=\"location\">\n                {weather.name}, {weather.sys.country}\n              </div>\n              <div className=\"date\"> {dateBuild(new Date())}</div>\n            </div>\n            <div className=\"weather-container\">\n              <div className=\"temperature\">\n                {Math.round(weather.main.temp)}Â°C\n              </div>\n              <div className=\"weather\"> {weather.weather[0].main}</div>\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}